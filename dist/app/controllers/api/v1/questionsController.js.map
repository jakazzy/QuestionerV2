{"version":3,"sources":["../../../../../app/controllers/api/v1/questionsController.js"],"names":["errorMessage","msg","index","req","res","json","status","data","questions","create","errors","formatWith","isEmpty","array","question","body","id","length","push","show","params","questionID","undefined","error","upvote","upvotes","downvote","downvotes"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe;AAAA,QAAGC,GAAH,QAAGA,GAAH;AAAA,WAAaA,GAAb;AAAA,CAArB;;kBAGe;AACXC,WAAO,eAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,YAAIC,IAAJ,CAAS;AACLC,oBAAQ,GADH;AAELC,kBAAMC;AAFD,SAAT;AAIH,KANU;;AAQXC,YAAQ,gBAACN,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAMM,SAAS,6BAAiBP,GAAjB,EAAsBQ,UAAtB,CAAiCX,YAAjC,CAAf;AACA,YAAI,CAACU,OAAOE,OAAP,EAAL,EAAuB;AACnBR,gBAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,wBAAQ,GADS;AAEjBI,wBAAQA,OAAOG,KAAP;AAFS,aAArB;AAIA;AACH;;AAED,YAAMC,WAAWX,IAAIY,IAArB;AACAD,iBAASE,EAAT,GAAcR,yBAAUS,MAAV,GAAmB,CAAjC;AACAT,iCAAUU,IAAV,CAAeJ,QAAf;AACAV,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,oBAAQ,GADS;AAEjBC,kBAAMO;AAFW,SAArB;AAIH,KAzBU;;AA2BXK,UAAM,cAAChB,GAAD,EAAMC,GAAN,EAAc;AAChB,YAAMU,WAAWN,yBAAUL,IAAIiB,MAAJ,CAAWC,UAAX,GAAwB,CAAlC,CAAjB;AACA,YAAIP,aAAaQ,SAAjB,EAA4B;AACxBlB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,wBAAQ,GADS;AAEjBiB,uBAAO;AAFU,aAArB;AAIA;AACH;;AAEDnB,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,oBAAQ,GADS;AAEjBC,kBAAMO;AAFW,SAArB;AAIH,KAzCU;;AA2CXU,YAAQ,gBAACrB,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAMU,WAAWN,yBAAUL,IAAIiB,MAAJ,CAAWC,UAAX,GAAwB,CAAlC,CAAjB;AACA,YAAIP,aAAaQ,SAAjB,EAA4B;AACxBlB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,wBAAQ,GADS;AAEjBiB,uBAAO;AAFU,aAArB;AAIA;AACH;;AAEDT,iBAASW,OAAT,IAAoB,CAApB;AACArB,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,oBAAQ,GADS;AAEjBC,kBAAMO;AAFW,SAArB;AAIH,KA1DU;;AA4DXY,cAAU,kBAACvB,GAAD,EAAMC,GAAN,EAAc;AACpB,YAAMU,WAAWN,yBAAUL,IAAIiB,MAAJ,CAAWC,UAAX,GAAwB,CAAlC,CAAjB;AACA,YAAIP,aAAaQ,SAAjB,EAA4B;AACxBlB,gBAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,wBAAQ,GADS;AAEjBiB,uBAAO;AAFU,aAArB;AAIA;AACH;;AAEDT,iBAASa,SAAT,IAAsB,CAAtB;AACAvB,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBC,oBAAQ,GADS;AAEjBC,kBAAMO;AAFW,SAArB;AAIH;AA3EU,C","file":"questionsController.js","sourcesContent":["import { validationResult } from 'express-validator/check';\nimport questions from '../../../dataStore/questionsTable';\n\nconst errorMessage = ({ msg }) => msg;\n\n\nexport default {\n    index: (req, res) => {\n        res.json({\n            status: 200,\n            data: questions,\n        });\n    },\n\n    create: (req, res) => {\n        const errors = validationResult(req).formatWith(errorMessage);\n        if (!errors.isEmpty()) {\n            res.status(400).json({\n                status: 400,\n                errors: errors.array(),\n            });\n            return;\n        }\n\n        const question = req.body;\n        question.id = questions.length + 1;\n        questions.push(question);\n        res.status(201).json({\n            status: 201,\n            data: question,\n        });\n    },\n\n    show: (req, res) => {\n        const question = questions[req.params.questionID - 1];\n        if (question === undefined) {\n            res.status(404).json({\n                status: 404,\n                error: 'Question does not exist',\n            });\n            return;\n        }\n\n        res.status(200).json({\n            status: 200,\n            data: question,\n        });\n    },\n\n    upvote: (req, res) => {\n        const question = questions[req.params.questionID - 1];\n        if (question === undefined) {\n            res.status(404).json({\n                status: 404,\n                error: 'Question does not exist',\n            });\n            return;\n        }\n\n        question.upvotes += 1;\n        res.status(200).json({\n            status: 200,\n            data: question,\n        });\n    },\n\n    downvote: (req, res) => {\n        const question = questions[req.params.questionID - 1];\n        if (question === undefined) {\n            res.status(404).json({\n                status: 404,\n                error: 'Question does not exist',\n            });\n            return;\n        }\n\n        question.downvotes += 1;\n        res.status(200).json({\n            status: 200,\n            data: question,\n        });\n    },\n};"]}